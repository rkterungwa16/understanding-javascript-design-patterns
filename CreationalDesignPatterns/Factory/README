Factory

  Usecase for Factory patterns
      1. A Generic interface for creating Objects
      2. A Mechanism to enforce encapsulation

    A Generic Interface For Creating Objects

      Creates an instance of several derived classes

      Define an interface for creating an object, but let
      subclasses decide which class to instantiate.

      Invoking a factory instead of directly creating a new object
      from a prototype using the new operator or Object.create()
      is much more convenient and flexible in several respects.

      Factory allows us to separate the object creation from Its
      implementation. Abstract the details of object creation
      from object use
        Useful when the object creation process is complex

      Factory allows the client to delegate object creation
      while still retaining control over which type to
      instantiate

      A factory wraps a new instance giving us more flexibility and
      control in the way we do it.

      The consumer of the factory is totally agnostic about how
      the creation of the instance is carried out.

      By using 'new', we are binding our code to one specific way
      of creating an object

      Example
      function createImage(name) {
          if (name.match(/\.jpeg$/)){
              return new JpegImage(name)
          } else {
            throw new Exception('Unsupported format')
          }
      }

      Factory allows us to not expose the constructors of the
      objects it creates, and prevents them from being extended
      or modified (small surface area)

      Keeping constructors private

      Objective of Factories is extensibility
        Factory methods are frequently used in applications
        that manage, maintain, or manipulate collections of
        objects that are different but at the same time have
        many characteristics in common
